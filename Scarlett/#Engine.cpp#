#include "Engine.h"

#include <iostream>
#include <sdl/SDL.h>
#include <gl/glew.h>
#include <string>

#include "VertexBuffer.h"
#include "IndexBuffer.h"
#include "VertexArray.h"
#include "VertexBufferLayout.h"
#include "Shader.h"

void Engine::StartEngine()
{
	if (SDL_Init(SDL_INIT_EVERYTHING) < 0)
	{
		std::cout << "Failed to init SDL." << std::endl;
		m_state = EngineState::Failed;
		return;
	}

	m_window = SDL_CreateWindow("Engine", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, m_width, m_height, SDL_WINDOW_OPENGL);
	if (!m_window)
	{
		m_state = EngineState::Failed;
	}

	SDL_GLContext glContext = SDL_GL_CreateContext(m_window);
	if (!glContext)
	{
		m_state = EngineState::Failed;
	}

	GLenum err = glewInit();
	if (err != GLEW_OK)
	{
		m_state = EngineState::Failed;
	}

	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);

	glClearColor(0.3f, 0.3f, 0.3f, 1.0f);

	m_state = EngineState::Running;
}

void Engine::Run()
{
	float vertexData[] =
	{
		0, 0,
		0, 1,
		1, 1,
		1, 0
	};

	unsigned int indexBuffer[] =
	{
		0, 1, 2,
		2, 3, 0
	};

	VertexArray va;
	VertexBuffer vb(vertexData, 4 * 2 * sizeof(float));

	VertexBufferLayout layout;
	layout.Push<float>(2);
	va.AddBuffer(vb, layout);

	IndexBuffer ib(indexBuffer, 6);

	Shader shader("res/shaders/shader.vert", "res/shaders/shader.frag");
	shader.Bind();

	shader.SetUniform4f("u_Color", 0.8f, 0.3f, 0.8f, 1.0f);
	
	va.Unbind();
	ib.Unbind();
	vb.Unbind();
	shader.Unbind();

	Renderer renderer;

	float r = 0.0f;
	float increment = 0.005f;

	while (m_state == EngineState::Running)
	{
		SDL_Event evnt;
		SDL_PollEvent(&evnt);

		switch (evnt.type)
		{
		case SDL_QUIT:
			m_state = EngineState::Close;
			break;
		default:
			break;
		}

		//Render();

		glClearDepth(1.0);

		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		shader.Bind();
		shader.SetUniform4f("u_Color", r, 0.3f, 0.8f, 1.0f);

		renderer.Draw(va, ib, shader);

		if (r > 1.0f)
			increment = -0.005f;
		else if (r < 0.0f)
			increment = 0.005f;
		r += increment;


		SDL_GL_SwapWindow(m_window);
	}
}

void Engine::DestroyEngine()
{
	SDL_DestroyWindow(m_window);

	SDL_Quit();
}


void Engine::Render()
{
  // This does nothing for now.

	

	
}